// <auto-generated />
using System;
using EFDataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFDataAccessLibrary.Migrations
{
    [DbContext(typeof(PeopleContext))]
    [Migration("20250724074919_ApartmentServTime")]
    partial class ApartmentServTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFDataAccessLibrary.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Apartment", b =>
                {
                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("date");

                    b.Property<int>("Deposit")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<bool>("Ejari")
                        .HasColumnType("bit");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ApartmentNumber");

                    b.ToTable("Apartments2");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ApartmentCheque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ApartmentNumber1")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsCashed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentNumber1");

                    b.ToTable("ApartmentCheques2");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ApartmentPPM", b =>
                {
                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Q1Date")
                        .HasColumnType("date");

                    b.Property<bool>("Q1Done")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("Q1Time")
                        .HasColumnType("time");

                    b.Property<DateTime>("Q2Date")
                        .HasColumnType("date");

                    b.Property<bool>("Q2Done")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("Q2Time")
                        .HasColumnType("time");

                    b.Property<DateTime>("Q3Date")
                        .HasColumnType("date");

                    b.Property<bool>("Q3Done")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("Q3Time")
                        .HasColumnType("time");

                    b.Property<DateTime>("Q4Date")
                        .HasColumnType("date");

                    b.Property<bool>("Q4Done")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("Q4Time")
                        .HasColumnType("time");

                    b.HasKey("ApartmentNumber");

                    b.ToTable("ApartmentPPMs2");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ApartmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ApartmentNumber1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentNumber1");

                    b.ToTable("ApartmentServices2");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<int>("Amount")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ContractId");

                    b.ToTable("Contracts2");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ContractDue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractDues2");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.PPM", b =>
                {
                    b.Property<int>("PPMId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PPMId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PPMId");

                    b.ToTable("PPMs2");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.PPMtime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("PPMId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("PPMId");

                    b.ToTable("PPMtimes2");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Address", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Person", null)
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ApartmentCheque", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Apartment", null)
                        .WithMany("ApartmentCheques")
                        .HasForeignKey("ApartmentNumber1");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ApartmentPPM", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Apartment", "Apartment")
                        .WithOne("PPM")
                        .HasForeignKey("EFDataAccessLibrary.Models.ApartmentPPM", "ApartmentNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ApartmentService", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Apartment", null)
                        .WithMany("ApartmentServices")
                        .HasForeignKey("ApartmentNumber1");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ContractDue", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Contract", null)
                        .WithMany("ContractDues")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Email", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Person", null)
                        .WithMany("EmailAddresses")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.PPMtime", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.PPM", null)
                        .WithMany("PPMtimes")
                        .HasForeignKey("PPMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Apartment", b =>
                {
                    b.Navigation("ApartmentCheques");

                    b.Navigation("ApartmentServices");

                    b.Navigation("PPM");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Contract", b =>
                {
                    b.Navigation("ContractDues");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.PPM", b =>
                {
                    b.Navigation("PPMtimes");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Person", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("EmailAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
